@model Repository.Models.Views.CreateCVApplicationViewModel

@{
    ViewBag.Title = "Dodaj swoją aplikacje na stanowisko - metaTitle - do 60 znaków";
    ViewBag.Opis = "Dodaj swoją aplikacje na stanowisko";
    ViewBag.SlowaKluczowe = "Dodaj swoją aplikacje na stanowisko, słowa kluczowe, keywords";
}

<h2>Dodaj swoją aplikacje na stanowisko</h2>


@using (Html.BeginForm("Create", "CVApplications", FormMethod.Post, new { enctype = "multipart/form-data" })) 
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>CVApplication</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.cvApplication.Workplace, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.cvApplication.Workplace, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.cvApplication.Workplace, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.cvApplication.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.cvApplication.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.cvApplication.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.cvApplication.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.cvApplication.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.cvApplication.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.cvApplication.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.cvApplication.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.cvApplication.Phone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.cvApplication.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.cvApplication.Description, new { @class = "form-control", @rows = "3" } )
                @Html.ValidationMessageFor(model => model.cvApplication.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.cvApplication.CVFileId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.cvApplication.CVFileId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.cvApplication.CVFileId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.cvApplication.PlaceId, "Skąd o nas wiesz?", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("PlaceId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.cvApplication.PlaceId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.cvApplication.AvailabilityId, "Dostępność", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("AvailabilityId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.cvApplication.AvailabilityId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Załącz plik", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                    <input class="btn-default" type="file" name="@Html.NameFor(x => x.File)" id="@Html.IdFor(x => x.File)" />
                    @Html.ValidationMessageFor(model => model.File, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.Label("Zgoda", new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.CheckBoxFor(m => m.Consent)
                @Html.ValidationMessageFor(model => model.Consent, "", new { @class = "text-danger" })
                <p>
                    Wyrażam zgodę na przetwarzanie danych
                </p>
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Dodaj" class="btn btn-success" />
            </div>
        </div>
    </div>
}

            <div>
                @Html.ActionLink("Powrót", "Index", null, new { @class = "btn btn-warning" })
            </div>

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
            }

<script>
			// extend jquery range validator to work for required checkboxes
			var defaultRangeValidator = $.validator.methods.range;
			$.validator.methods.range = function(value, element, param) {
				if(element.type === 'checkbox') {
					// if it's a checkbox return true if it is checked
					return element.checked;
				} else {
					// otherwise run the default validation function
					return defaultRangeValidator.call(this, value, element, param);
				}
			}
</script>
